container BAG : using = "geography"
{  
	container Snapshots
	{
	
		parameter<string> SnapshotDir := '%SourceDataDir%/BAG/snapshots.ext/YYYY01';
		
		
		container Panden :=
			for_each_ne(
				Typeringen/kwartalen/name
				, 'MaakPanden_T('+quote(Typeringen/kwartalen/name)+','+string(Typeringen/kwartalen/values)+','+quote(SnapshotDir)+')'
			);
		
		container Vbos :=
			for_each_ne(
				Typeringen/kwartalen/name
				, 'MaakVBOs_T('+quote(Typeringen/kwartalen/name)+','+string(Typeringen/kwartalen/values)+','+quote(SnapshotDir)+')'
			);
		
		container Adressen :=
			for_each_ne(
				Typeringen/kwartalen/name
				, 'MaakAdressen_T('+quote(Typeringen/kwartalen/name)+','+string(Typeringen/kwartalen/values)+','+quote(SnapshotDir)+')'
			);
		
		Template MaakPanden_T
		{
			parameter<string> Jaar_str;
			parameter<uint32> Jaar;
			parameter<string> SnapshotDir;
			
			parameter<string> SnapshotDirJaar := replace(SnapshotDir, 'YYYY', string(Jaar));
			unit<uint32>  vbo_domein            := ='VBOs/' + Jaar_str + '/vbo';
			// unit<uint32> RegioUnit_PC6 := ='Snapshots/Adressen/'+Jaar_str+'/adres/PC6_AMS';
			
			unit<uint32> pand_src
			:	StorageName     = "= SnapshotDirJaar + '/pand.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<geography/rdc_mm>             geometry_mm (poly) ;
				attribute<geography/rdc>                geometry(poly) := geometry_mm[rdc];
				attribute<string>                       identificatie;
				attribute<eenheden/jaar>                bouwjaar;
				// attribute<typeringen/WPSrc>             type_woonpand_rel;
				// attribute<WPSrc>      woonpand_type;
				// attribute<WPSrc>      WPSrc_rel             := woonpand_type;
				// attribute<WP>         WP_rel                := rjoin(WPSrc_rel, id(WPSrc), WPSrc/WP_rel);
				
				attribute<geography/rdc_mm>             NW     := lower_bound(pand_src/geometry_mm);
				attribute<geography/rdc_mm>             SE     := upper_bound(pand_src/geometry_mm);
				attribute<int32>                        X_ext  := PointCol(SE) - PointCol(NW);
				attribute<int32>                        Y_ext  := PointRow(SE) - PointRow(NW);
				
				attribute<geography/rdc_mm>             pand_centroid := centroid_or_mid(geometry_mm);
				attribute<uint32>                       ams_rel    := point_in_polygon(pand_centroid[geography/rdc], selectie_polygoon/polygon);
				
				container meta
				{
					attribute<string>        status              (..);
					attribute<int32>         begindatum          (..);
					attribute<int32>         documentdatum       (..);
					attribute<string>        documentnummer      (..);
					attribute<int32>         einddatum           (..);
					attribute<bool>          is_correctie        (..);
					attribute<bool>          is_inactief         (..);
					attribute<bool>          is_onderzoek        (..);
				}
			}
			
			unit<uint32> pand := subset(pand_src/X_ext < 1000000i && pand_src/Y_ext < 1000000i && IsDefined(pand_src/ams_rel)
											&& 	(pand_src/meta/status == 'Pand in gebruik' 
												|| pand_src/meta/status == 'Pand in gebruik (niet ingemeten)' 
												|| pand_src/meta/status == 'Pand buiten gebruik'
												)
										)
			, DialogType = "Map"
			, DialogData = "geometry_mm"
			, FreeData = "False"
			{
				attribute<geography/rdc_mm>           geometry_mm (polygon)       := pand_src/geometry_mm[Nr_OrgEntity];
				attribute<geography/rdc>              geometry (polygon)          := geometry_mm[geography/rdc];
				attribute<string>                     identificatie               := pand_src/identificatie[Nr_OrgEntity];
				attribute<eenheden/jaar>              bouwjaar                    := pand_src/bouwjaar[Nr_OrgEntity];
				attribute<int16>                      bouwjaar_trunc              := bouwjaar < 1000s || bouwjaar > 2019s ? (0/0)[int16] : bouwjaar < 1600s ? 1600s : bouwjaar;
				// attribute<typeringen/WP>              woonpand_rel                := pand_src/wp_rel[Nr_OrgEntity];
				// attribute<typeringen/WP>              woonpand_rel                := pand_src/woonpand_rel[Nr_OrgEntity];
				attribute<eenheden/m2>                opp                         := area(geometry, eenheden/m2);
				
				attribute<geography/rdc>              pand_centroid               := centroid_or_mid(geometry);
				attribute<geography/rdc>              centroid                    := centroid_or_mid(geometry);
				attribute<geography/NL_grid/domain>   NL_grid_domain_rel          := pand_centroid[geography/NL_grid/domain];
				attribute<uint32>                     studyarea_rel               := point_in_polygon(pand_centroid, selectie_polygoon/polygon);
				
				attribute<.>                          pand_vbo_rel (vbo_domein)                  := vbo_domein/pand_rel;
				// attribute<string>            PC6                 := first(vbo_domein/pc6, pand_vbo_rel);
				// attribute<RegioUnit_PC6>     pc6_rel             := rlookup(PC6, RegioUnit_PC6/pc6);
				// attribute<int16>             median_bouwjaar_app_perPC6  (RegioUnit_PC6) := rth_element(woonpand_rel == wp/v/appartement ? bouwjaar_trunc : 0s/0s, 0.5f, pc6_rel);
				
				
				attribute<uint32>                     sum_vbo                     := ='count(vbos/'+Jaar_str+'/vbo/geometry, vbos/'+Jaar_str+'/vbo/pand_rel)';
				attribute<uint32>                     monumentale_per_domain_grid   (NL_grid/domain) := count(bouwjaar_trunc <= 1900s ? bouwjaar_trunc : (0/0)[int16], NL_grid_domain_rel);
				
				container ImpedancePerStation :=
					for_each_ne(
						typeringen/metro_stations/name
						, 'Rekenschemas/MaakImpedancePerStation(' +quote(typeringen/metro_stations/name)+ ', '+Jaar_str+'/Pand)'
					);
					
				unit<uint32> Amsterdam_selectie := subset(IsDefined(studyarea_rel))
				,	StorageName     = "%LocalDataDir%/Panden_Amsterdam.fss"
				,	DialogType = "Map"
				,	DialogData = "pand_centroid"
				{
					attribute<geography/rdc>                 pand_centroid             := ../pand_centroid[nr_OrgEntity];
					attribute<string>                        identificatie        := ../identificatie[nr_OrgEntity];
					

				}
				
			}
		}
		
		
		Template MaakVBOs_T
		{ 
			parameter<string> Jaar_str;
			parameter<uint32> Jaar;
			parameter<string> SnapshotDir;
			//
			parameter<string> SnapshotDirJaar := replace(SnapshotDir, 'YYYY', string(Jaar));
			
			container  panden                     := ='Snapshots/Panden/'+Jaar_str;
			unit<uint32>  pand_src_domein            := Panden/pand_src;
			unit<uint32>  pand_domein                := Panden/pand;
			// unit<uint32>  pand_met_vbo_woon_domein   := pand_domein/pand_woon_vbo;
			// unit<uint32>  pand_met_vbo_domein        := pand_domein/pand_met_vbo;
			// unit<uint32>  adres_domein               := Adressen/adres;
			// unit<uint32> RegioUnit_PC6 := ='Snapshots/Adressen/'+Jaar_str+'/adres/PC6_AMS';
			
			unit<uint32> vbo
			:	StorageName     = "= SnapshotDirJaar + '/vbo.fss'"
			,	StorageReadOnly = "True"
			, 	FreeData        = "False"
			,	DialogType = "Map"
			,	DialogData = "geometry_mm"

			{
				attribute<geography/rdc_mm>           geometry_mm; 
				attribute<geography/rdc>              geometry             := geometry_mm[geography/rdc];
				attribute<string>                     identificatie;
				attribute<string>                     nummeraanduiding_id;
				attribute<int32>                      oppervlakte;
				attribute<NL_grid/domain>             NL_grid_domain_rel   := geometry[NL_grid/domain];
				attribute<string>                     pand_id;
				attribute<pand_src_domein>            pand_src_rel := rlookup(pand_id, pand_src_domein/identificatie);
				attribute<pand_domein>                pand_rel     := rlookup(pand_id, pand_domein/identificatie);
				attribute<string>                     PC6                  := ='rjoin(nummeraanduiding_id, /Brondata/BAG/Snapshots/Adressen/'+Jaar_str+'/adres/nummeraanduiding_id, /Brondata/BAG/Snapshots/Adressen/'+Jaar_str+'/adres/postcode)';
				// attribute<typeringen/WP>              woonpand_rel         := pand_domein/woonpand_rel[pand_rel];

				attribute<uint32>                     studyarea_rel        := point_in_polygon(geometry, selectie_polygoon/polygon);
				attribute<uint32>                     ams_rel              := point_in_polygon(geometry, selectie_polygoon/polygon);
				// attribute<uint32>                     gem_ams_rel          := point_in_polygon(geometry, /Brondata/regios/gemeenten/src_2016/Amsterdam/Geometry);
				
				attribute<string> gebruiksdoel := 
					gebruiksdoelen/woon 
						? 'woon' 
						: (gebruiksdoelen/bijeenkomst 
							? 'bijeenkomst' 
							: (gebruiksdoelen/cel 
								? 'cel' 
								: (gebruiksdoelen/gezondheidszorg 
									? 'gezondheidszorg' 
									: (gebruiksdoelen/industrie 
										? 'industrie' 
										: (gebruiksdoelen/kantoor 
											? 'kantoor' 
											: (gebruiksdoelen/logies 
												? 'logies' 
												: (gebruiksdoelen/onderwijs 
													? 'onderwijs' 
													: (gebruiksdoelen/overige_gebruiks 
														? 'overige_gebruiks' 
														: (gebruiksdoelen/sport 
															? 'sport' 
															: (gebruiksdoelen/winkel 
																? 'winkel' 
																: ''
															))))))))));
				attribute</typeringen/vbo_gebruiksdoel> gebruiksdoel_class := rlookup(gebruiksdoel, /typeringen/vbo_gebruiksdoel/name);
				
				
				unit<uint32> src := subset(IsDefined(studyarea_rel) && (vbo/meta/status == 'Verblijfsobject buiten gebruik' || vbo/meta/status == 'Verblijfsobject in gebruik' || vbo/meta/status == 'Verblijfsobject in gebruik (niet ingemeten)'))
				, 	FreeData = "False"
				{
					attribute<geography/rdc_mm>                                        geometry_mm         := vbo/geometry_mm[nr_OrgEntity], DisableStorage = "True";
					attribute<geography/rdc>                                           geometry            := geometry_mm[geography/rdc]; //, Storagename = "='%LocalDataProjDir%/OutputOri/BAG_vbo_2018_' +name+ '_opp.shp'";
					attribute<int32>                                                   oppervlakte         := vbo/oppervlakte[nr_OrgEntity];
					attribute<int32>                                                   oppervlakte_trunc   := oppervlakte < 1000i ? oppervlakte : 0i, DisableStorage = "True";
					attribute<int32>                                                   oppervlakte_trunc2   := oppervlakte < 500000i && oppervlakte != 99999i && oppervlakte != 9999i ? oppervlakte : 0i, DisableStorage = "True";
					
					attribute<string>                                                  identificatie       := vbo/identificatie[nr_OrgEntity];
					attribute<uint32>                                                  begindatum          := vbo/meta/begindatum[nr_OrgEntity];
					attribute<string>                                                  nummeraanduiding_id := vbo/nummeraanduiding_id[nr_OrgEntity];
					// attribute<uint32>                                                  pand_rel            := ='point_in_polygon(geometry_mm, panden/'+Jaar_str+'/pand/geometry_mm)';
					attribute<string>                                                  pand_id             := vbo/pand_id[nr_OrgEntity];
					// attribute<typeringen/WP>                                           woonpand_rel        := vbo/woonpand_rel[nr_OrgEntity];
					attribute<NL_grid/domain>                                          NL_grid_domain_rel  := geometry[NL_grid/domain];
					attribute</typeringen/vbo_gebruiksdoel>                            gebruiksdoel_class  := vbo/gebruiksdoel_class[nr_OrgEntity];
					
					// attribute<Regios/Gemeenten/src_2012/AgglAmsterdam>      aggl_ams_rel        := point_in_polygon(geometry, Regios/Gemeenten/src_2012/AgglAmsterdam/geometry);
					// attribute<bool>                                         IsAgglAms           := IsDefined(aggl_ams_rel);
					// attribute<Regios/Gemeenten/src_2012/Regio_Amsterdam>    gem_ams_rel         := point_in_polygon(geometry, Regios/gemeenten/src_2012/Regio_Amsterdam/geometry);
					// attribute<Regios/buurten/src_2012/Regio_Amsterdam>      buurt_ams_rel       := point_in_polygon(geometry, Regios/buurten/src_2012/Regio_Amsterdam/Geometry_f);
					// attribute<Regios/wijken/src_2012/Regio_Amsterdam>       wijk_ams_rel        := point_in_polygon(geometry, Regios/wijken/src_2012/Regio_Amsterdam/geometry_f);
					// attribute<Regios/Stadsdelen>                            stadsdeel_rel       := point_in_polygon(geometry, Regios/Stadsdelen/geometry);
					// attribute<Regios/Stadsdelen_Bewoond>                    stadsdeel_bew_rel   := point_in_polygon(geometry, Regios/Stadsdelen_Bewoond/geometry);
					// attribute<regios/Postcode_gebieden/Postcode6_areas/MRA> pc6_mra_rel         := point_in_polygon(geometry, Brondata/regios/Postcode_gebieden/Postcode6_areas/MRA/geometry);
				}
				
				unit<uint32> Amsterdam_selectie := subset(IsDefined(studyarea_rel))
				,	StorageName     = "%LocalDataDir%/Vbos_Amsterdam.fss"
				,	DialogType = "Map"
				,	DialogData = "geometry"
				{
					attribute<geography/rdc_mm>              geometry_mm             := ../geometry_mm[nr_OrgEntity];
					attribute<geography/rdc>                 geometry             := ../geometry[nr_OrgEntity];
					// attribute<int32>                      oppervlakte          := ../oppervlakte[nr_OrgEntity];
					attribute<string>                        identificatie        := ../identificatie[nr_OrgEntity];
				}
				
				container gebruiksdoelen :=
					for_each_ndv(
						typeringen/vbo_gebruiksdoel/name
						, vbo
						, bool
					);
					
				container count_doelen :=
					for_each_nedv(
						typeringen/vbo_gebruiksdoel/name
						, 'sum(float32(gebruiksdoelen/'+typeringen/vbo_gebruiksdoel/name+'), NL_grid_domain_rel)'
						, NL_grid/domain
						, float32
					)
				{
					attribute<float32>    Total               (NL_grid/domain) := = 'add('+asList(typeringen/vbo_gebruiksdoel/name,',') + ')';
					attribute<float32>    shannon_diversity   (NL_grid/domain) := = '- add(' +asItemList(+ 'MakeDefined(log(' +typeringen/vbo_gebruiksdoel/name+ ' / Total), 0f) * ' +typeringen/vbo_gebruiksdoel/name+ ' / Total' )+')';
				}
				
				container count_doelen_fracties :=
					for_each_nedv(
						typeringen/vbo_gebruiksdoel/name
						, 'sum(float32(gebruiksdoelen/'+typeringen/vbo_gebruiksdoel/name+'), NL_grid_domain_rel) / 713f'
						, NL_grid/domain
						, float32
					)
				{
					attribute<float32>    Total            (NL_grid/domain) := = 'add('+asList(typeringen/vbo_gebruiksdoel/name,',') + ')';
					attribute<float32>    diversity        (NL_grid/domain) := = 'add('+asList( + 'sqr(' + typeringen/vbo_gebruiksdoel/name + ')',',')+')';
				}
				
				attribute<Typeringen/vbo_status>          status_rel              := rlookup(meta/status, Typeringen/vbo_status/label);
				container meta
				{
					attribute<string>        status        (..);
					attribute<uint32>        begindatum    (..);
				}
				
				container GebruiksdoelSets :=
					for_each_ne(
						typeringen/vbo_gebruiksdoel/name
						, 'MaakGebruiksdoelSets_templ(' + quote(typeringen/vbo_gebruiksdoel/name) +')'
					);
						
				Template MaakGebruiksdoelSets_templ
				{
					///
					parameter<string> name;
					///
					
					unit<uint32> GebruiksdoelSet := ='subset(vbo/gebruiksdoelen/' + name + ' 
						&& IsDefined(vbo/ams_rel)
						&& (vbo/status_rel == Typeringen/vbo_status/V/verblijfsobject_in_gebruik
										|| vbo/status_rel == Typeringen/vbo_status/V/verblijfsobject_in_gebruik_niet_ingemeten
										|| vbo/status_rel == Typeringen/vbo_status/V/verblijfsobject_buiten_gebruik
										|| vbo/status_rel == Typeringen/vbo_status/V/Verbouwing_verblijfsobject)
						)'
					{
						attribute<geography/rdc_mm>                                        geometry_mm         := vbo/geometry_mm[nr_OrgEntity], DisableStorage = "True";
						attribute<geography/rdc>                                           geometry            := geometry_mm[geography/rdc]; //, Storagename = "='%LocalDataProjDir%/OutputOri/BAG_vbo_2018_' +name+ '_opp.shp'";
						attribute<int32>                                                   oppervlakte         := vbo/oppervlakte[nr_OrgEntity];
						attribute<int32>                                                   oppervlakte_trunc   := oppervlakte < 1000i ? oppervlakte : 0i, DisableStorage = "True";
						
						attribute<string>                                                  identificatie       := vbo/identificatie[nr_OrgEntity];
						attribute<uint32>                                                  begindatum          := vbo/meta/begindatum[nr_OrgEntity];
						attribute<string>                                                  nummeraanduiding_id := vbo/nummeraanduiding_id[nr_OrgEntity];
						attribute<string>                                                  PC6                 := ='rjoin(nummeraanduiding_id, /Brondata/BAG/Snapshots/Adressen/'+Jaar_str+'/adres/nummeraanduiding_id, /Brondata/BAG/Snapshots/Adressen/'+Jaar_str+'/adres/postcode)';

						attribute<string>                                                  pand_id             := vbo/pand_id[nr_OrgEntity];
						// attribute<typeringen/WP>                                           woonpand_rel        := vbo/woonpand_rel[nr_OrgEntity];
						// attribute<typeringen/WP>                                           WP_rel              := id(typeringen/WP)[woonpand_rel];
						// attribute<typeringen/WP2>                                          WP2_rel             := switch(
																													// case(WP4_rel == typeringen/WP4/V/appartement,WP2/V/meergezins)
																													// ,case(WP4_rel == typeringen/WP4/V/vrijstaand,WP2/V/eengezins)
																													// ,case(WP4_rel == typeringen/WP4/V/twee_onder_1_kap,WP2/V/eengezins)
																													// ,case(WP4_rel == typeringen/WP4/V/rijtjeswoning,WP2/V/eengezins)
																													// , 0b/0b
																												// );
						// attribute<typeringen/WP4>                                          WP4_rel             := typeringen/WP/WP4_rel[WP_rel];
						attribute<NL_grid/domain>                                          NL_grid_domain_rel  := geometry[NL_grid/domain];
						
						// attribute<Regios/Gemeenten/src_2012/AgglAmsterdam>      aggl_ams_rel        := point_in_polygon(geometry, Regios/Gemeenten/src_2012/AgglAmsterdam/geometry);
						// attribute<bool>                                         IsAgglAms           := IsDefined(aggl_ams_rel);
						// attribute<Regios/Gemeenten/src_2012/Regio_Amsterdam>    gem_ams_rel         := point_in_polygon(geometry, Regios/gemeenten/src_2012/Regio_Amsterdam/geometry);
						// attribute<Regios/buurten/src_2012/Regio_Amsterdam>      buurt_ams_rel       := point_in_polygon(geometry, Regios/buurten/src_2012/Regio_Amsterdam/Geometry_f);
						// attribute<Regios/wijken/src_2012/Regio_Amsterdam>       wijk_ams_rel        := point_in_polygon(geometry, Regios/wijken/src_2012/Regio_Amsterdam/geometry_f);
						// attribute<Regios/Stadsdelen>                            stadsdeel_rel       := point_in_polygon(geometry, Regios/Stadsdelen/geometry);
						// attribute<Regios/Stadsdelen_Bewoond>                    stadsdeel_bew_rel   := point_in_polygon(geometry, Regios/Stadsdelen_Bewoond/geometry);
						// attribute<regios/Postcode_gebieden/Postcode6_areas/MRA> pc6_mra_rel         := point_in_polygon(geometry, Brondata/regios/Postcode_gebieden/Postcode6_areas/MRA/geometry);
						// attribute<RegioUnit_PC6>                                pc6_rel             := rlookup(PC6, RegioUnit_PC6/pc6);
						
						// attribute<float32>                                      app_perPC6          (RegioUnit_PC6)           := sum(WP4_rel == WP4/V/appartement ? 1 : 0, pc6_rel)[float32];
						// attribute<float32>                                      pr_app_perPC6       (RegioUnit_PC6)           := sum(WP4_rel == WP4/V/appartement ? 1 : 0, pc6_rel)[float32] / sum(IsDefined(WP4_rel) ? 1 : 0, pc6_rel)[float32];
						// attribute<float32>                                      avg_opp_app_perPC6  (RegioUnit_PC6)           := mean(WP4_rel == WP4/V/appartement ? oppervlakte_trunc[float32] : 0f/0f, pc6_rel);
						
						
						attribute<nrwonha>                                      count_ha (NL_grid/domain)   := count(geometry, NL_grid_domain_rel)[nrwonha];  
						attribute<int32>                                        sum_opp_ha (NL_grid/domain) := sum(oppervlakte < 1000i && oppervlakte >= 10i ? oppervlakte : 0i, NL_grid_domain_rel);  
						
						// attribute<nrwonha>                                      count_ha_ams_zonder0 (NL_grid/domain) := (count_ha * Regios/gemeenten/src_2012/AgglAmsterdam/code_const[float32]) > 0[nrwonha] ? count_ha * Regios/gemeenten/src_2012/AgglAmsterdam/code_const[float32] : (0/0)[nrwonha];  

						// container Oppervlakte_4WP :=
							// for_each_nedv(
								  // typeringen/WP/name
								// , 'MakeDefined(mean(woonpand_rel == ' + string(id(typeringen/WP)) + '[typeringen/WP] ? oppervlakte_trunc[float32] : (0/0)[m2_woning], geometry[NL_grid/domain]), 0[m2_woning])'
								// , NL_grid/domain
								// , m2_woning
							// );


						// container type_woonpand :=
							// for_each_nedv(
								// typeringen/WP/name 
								// , 'sum(woonpand_rel == ' + string(id(typeringen/WP)) + '[typeringen/vbo_gebruiksdoel] ? 1 : 0, NL_grid_domain_rel)'
								// , NL_grid/domain
								// , uint32
							// ), Freedata = "False"
						// {
							// attribute<uint32> totaal (NL_grid/domain) := ='add(' + AsItemList(typeringen/WP/name) + ')';
						// }
					}
				}
				
				unit<uint32> zonderwoonfunctie_enCBSStatus := 
					subset(!vbo/gebruiksdoelen/woon && (vbo/meta/status == 'Verblijfsobject buiten gebruik' || vbo/meta/status == 'Verblijfsobject in gebruik' || vbo/meta/status == 'Verblijfsobject in gebruik (niet ingemeten)') && IsDefined(ams_rel))
				,	DialogType = "Map"
				,	DialogData = "geometry_mm"
				, 	FreeData = "False"
				{
					attribute<geography/rdc_mm>            geometry_mm               := vbo/geometry_mm[nr_OrgEntity];
					attribute<geography/rdc>               geometry                  := geometry_mm[geography/rdc];
					
					attribute<int32>                       oppervlakte               := vbo/oppervlakte[nr_OrgEntity];
					attribute<int32>                       oppervlakte_trunc         := oppervlakte < 1000i ? oppervlakte : 0i;
					
					attribute<NL_grid/domain>              NL_grid_domain_rel        := geometry[NL_grid/domain];
					attribute<nrwonha>                     count_ha (NL_grid/domain) := count(geometry, NL_grid_domain_rel)[nrwonha];  
				}
			}
		}
		
		
		Template MaakAdressen_T
		{
			parameter<string> Jaar_str;
			parameter<uint32> Jaar;
			parameter<string> SnapshotDir;
			/////
			parameter<string> SnapshotDirJaar := replace(SnapshotDir, 'YYYY', string(Jaar));
		
			unit<uint32> adres
			:	StorageName     = "= SnapshotDirJaar + '/adres.fss'"
			,	StorageReadOnly = "True"
			{
				attribute<string>   straatnaam;
				attribute<string>   postcode;
				attribute<int32>    huisnummer;
				attribute<string>   huisletter;
				attribute<string>   toevoeging;
				attribute<string>   woonplaatsnaam;
				attribute<string>   nummeraanduiding_id;

				attribute<rdc>     geometry;
				attribute<rdc_mm>  geometry_mm           	:= geometry[rdc_mm];
				
				attribute<string>    postcode_huisnr_huisletter_toev := postcode + '_' + string(huisnummer) + iif(huisletter != '', '_' + huisletter, '') + iif(toevoeging != '', '_' + toevoeging, '');
			
				attribute<uint32>   uq_rel := rlookup(postcode, pc6_uq/values);
				
				unit<uint32> pc6_uq := unique(postcode)
				{
					attribute<float32>  x_mean := mean(pointcol(../geometry), uq_rel);
					attribute<float32>  y_mean := mean(pointrow(../geometry), uq_rel);
					attribute<rdc>      geometry := point(x_mean, y_mean, rdc);
					attribute<string>   PC6      := values;
				}
				
				unit<uint32> PC6_centroids := subset(IsDefined(pc6_uq/geometry) && pc6_uq/PC6 != '')
				{
					attribute<rdc>      geometry := pc6_uq/geometry[nr_OrgEntity];
					attribute<string>   PC6      := pc6_uq/PC6[nr_OrgEntity];
					attribute<string>   Label    := pc6;
					attribute<Brondata/Regios/Stadsdelen> Stadsdeel_rel := point_in_polygon(geometry, /Brondata/Regios/Stadsdelen/geometry);
				}
				unit<uint32> PC6_AMS := subset(IsDefined(PC6_centroids/Stadsdeel_rel))
				{
					attribute<rdc>      geometry := PC6_centroids/geometry[nr_OrgEntity];
					attribute<string>   PC6      := PC6_centroids/PC6[nr_OrgEntity];
					attribute<string>   Label    := pc6;
					attribute<Brondata/Regios/Buurten/src_2021>    buurt_rel        := point_in_polygon(geometry, Brondata/Regios/Buurten/src_2021/geometry);
				}
			}
		}
	}
}
