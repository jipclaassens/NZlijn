container OSM
{
	parameter<string> file_date := ModelParameters/OSM_Date;
	parameter<string> localdir  := '%LocalDataDir%/NZlijn/OSM';
	parameter<string> dir       := '%SourceDataDir%/OSM/'+file_date;
	parameter<string> date      := 'latest';
	unit<uint32>      Regios    := ModelParameters/OSM_Regios;

	container Prepare_SourceData :=
		for_each_ne(
			Regios/name
			, 'Prepare_SourceData_T('+quote(Regios/label)+','+quote(Regios/country)+')'
		)
	{
		// parameter<string> Generate := =AsList(Regios/name+'/Generate', ' + ');
	}
	
	Template Prepare_SourceData_T
	{
		parameter<string> Regio;
		parameter<string> Country;
		///
		unit<uint32> Read_Roads_shp 
		:	StorageName     = "= dir + '/'+Regio+'-'+date+'-free.shp/gis_osm_roads_free_1.shp'"
		,	StorageType     = "gdal.vect"
		,	StorageReadOnly = "True"
		,	DialogType = "Map"
		,	DialogData = "geometry_lb"
		{
			attribute<wgs84_base>        geometry    (arc);
			attribute<rdc>               geometry_rd (arc)   := LatLongWgs842RD(geometry, dpoint)[rdc];
			attribute<string>            fclass;
			attribute<int32>             maxspeed;
		}
		
		unit<uint32> Make_Roads_fss := Read_Roads_shp
		,   StorageName = "=localdir+'/RegionFiles/'+Regio+'/Roads_'+file_date+'.fss'"
		{
			attribute<rdc>                         geometry (arc) := Read_Roads_shp/geometry_rd;
			attribute<string>                      fclass         := Read_Roads_shp/fclass;
			attribute<km_hr>                       maxspeed       := Read_Roads_shp/maxspeed[km_hr];
			attribute<string>                      OSM_id         := Read_Roads_shp/OSM_id;
		}
		
		unit<uint32> Read_Roads_fss 
		:   StorageName = "=localdir+'/RegionFiles/'+Regio+'/Roads_'+file_date+'.fss'"
		,	StorageReadOnly = "True"
		{
			attribute<rdc>                         geometry (arc);
			attribute<string>                      fclass;
			attribute<string>                      OSM_id;
			attribute<km_hr>                       maxspeed;
			attribute<classifications/OSM/wegtype> wegtype                   := rlookup(fclass, classifications/OSM/wegtype/name);  
		}
		
		unit<uint32> Attributes := SubItem_PropValues(Make_Roads_fss,'name');
		parameter<string> Generate := 'Ready', ExplicitSuppliers = "=AsList('Make_Roads_fss/'+Attributes/name, ';')";
	}
	
	container Merge_SourceData
	{
		container Merge_Roads_perCountry :=
			for_each_ne(
				Regios/Countries/name
				, 'Make_Merged_Roads_perCountry_T('+quote(Regios/Countries/name)+')'
			);
		
		Template Make_Merged_Roads_perCountry_T
		{
			parameter<string> country_name;
			//
			unit<uint32> Country_regios := ='Regios/'+country_name;

			unit<uint32>  Merge_CountryRegion_Roads := ='union_unit('+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss', ',')+')'
			{
				attribute<rdc>                          geometry (arc)                   := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/geometry', ',')+')';
				attribute<km_hr>                        maxspeed                         := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/maxspeed', ',')+')';
				attribute<classifications/OSM/wegtype>  wegtype                          := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/wegtype', ',')+')';
				attribute<string>                       OSM_id                           := ='union_data(., '+AsList('Prepare_SourceData/'+Country_regios/name+'/Read_Roads_fss/OSM_id', ',')+')';
				
				attribute<km_hr>                       maxspeed_edit00                                                := maxspeed != 0[km_hr] && IsDefined(maxspeed) && maxspeed < 140[km_hr]  ? maxspeed : rjoin(wegtype, id(classifications/OSM/wegtype), rth_maxspeed_per_wegtype_Defined);
				attribute<km_hr>                       maxspeed_edit0                                                 := wegtype == classifications/OSM/wegtype/v/motorway && maxspeed_edit00 < 80[km_hr] ? rjoin(wegtype, id(classifications/OSM/wegtype), rth_maxspeed_per_wegtype_Defined) : maxspeed_edit00;
				attribute<km_hr>                       maxspeed_edit                                                  := switch(case(maxspeed_edit0 == 0[km_hr], ModelParameters/CarDefaultSpeed), case(maxspeed_edit0 < 15[km_hr], 15[km_hr]), maxspeed_edit0);
				attribute<km_hr>                       rth_maxspeed_per_wegtype (classifications/OSM/wegtype)         := rth_element(maxspeed, 0.9f, wegtype);
				attribute<km_hr>                       rth_maxspeed_per_wegtype_Defined (classifications/OSM/wegtype) := MakeDefined(rth_maxspeed_per_wegtype, ModelParameters/CarDefaultSpeed_low) == 0[km_hr] ? ModelParameters/CarDefaultSpeed_low : MakeDefined(rth_maxspeed_per_wegtype, ModelParameters/CarDefaultSpeed_low);
			}
		}

		unit<uint32>  Merge_Country_Roads := ='union_unit('+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads', ',')+')'
		{
			attribute<rdc>                          geometry (arc)     := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/geometry', ',')+')';
			attribute<km_hr>                        maxspeed           := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/maxspeed_edit', ',')+')';
			attribute<classifications/OSM/wegtype>  wegtype            := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/wegtype', ',')+')';
			attribute<string>                       OSM_id            := ='union_data(., '+AsList('Merge_Roads_perCountry/'+Regios/Countries/name+'/Merge_CountryRegion_Roads/OSM_id', ',')+')';
		}
	
	}
	
	#include <NetworkPreperation.dms>

	unit<uint32> Read_Final_Network
	:   StorageName = "=localdir+'/Final_Network_'+file_date+'.fss'"
	,   StorageReadOnly = "true"
	,   FreeData = "false"
	{
		attribute<rdc>                          geometry (arc);
		attribute<classifications/OSM/wegtype>  wegtype;
		attribute<km_hr>                        maxspeed;
		attribute<string>                       OSM_id;
		attribute<string>                       wegtype_label                    := classifications/OSM/wegtype/label[wegtype];
		attribute<km_hr>                        freeflow_speed_bike              := const(ModelParameters/BikingSpeed_kmhr,.);
		attribute<km_hr>                        freeflow_speed_pedestrian        := const(ModelParameters/WalkingSpeed_kmhr,.);
		
		
		attribute<bool>                         isPartOfCarNetwork        := classifications/OSM/wegtype/IsPartOfCarNetwork[wegtype];
		attribute<bool>                         isPartOfBikeNetwork       := classifications/OSM/wegtype/isPartOfBikeNetwork[wegtype];
		attribute<bool>                         isPartOfPedestrianNetwork := classifications/OSM/wegtype/isPartOfPedestrianNetwork[wegtype];
		attribute<bool>                         isMRA                     := rjoin(id(.), DetermineStudyArea/SequenceNr, DetermineStudyArea/isMRA);
		
		unit<uint32> DetermineStudyArea := Sequence2Points(geometry)
		{
			attribute<bool> isMRA := IsDefined(point_in_polygon(point, geometries/selection_polygon_MRA/polygon));
		
		}

		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                   ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}

	unit<uint32> Network_Car := subset(Read_Final_Network/isPartOfCarNetwork && Read_Final_Network/isMRA)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[nr_OrgEntity];
		attribute<classifications/OSM/wegtype>  wegtype                          := Read_Final_Network/wegtype[nr_OrgEntity];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[nr_OrgEntity];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[nr_OrgEntity];
		
		attribute<km_hr>                        freeflow_speed_car               := Read_Final_Network/maxspeed[nr_OrgEntity];
		attribute<km_hr>                        freeflow_speed_bike              := const((0/0)[km_hr],.);
		attribute<km_hr>                        freeflow_speed_pedestrian        := const((0/0)[km_hr],.);
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                  ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}
	unit<uint32> Network_Bike := subset(Read_Final_Network/isPartOfBikeNetwork && Read_Final_Network/isMRA)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[nr_OrgEntity];
		attribute<classifications/OSM/wegtype>  wegtype                          := Read_Final_Network/wegtype[nr_OrgEntity];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[nr_OrgEntity];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[nr_OrgEntity];
		
		attribute<km_hr>                        freeflow_speed_car               := const((0/0)[km_hr],.);
		attribute<km_hr>                        freeflow_speed_bike              := Read_Final_Network/freeflow_speed_bike[nr_OrgEntity];
		attribute<km_hr>                        freeflow_speed_pedestrian        := const((0/0)[km_hr],.);
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                   ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}
	unit<uint32> Network_Pedestrian := subset(Read_Final_Network/isPartOfPedestrianNetwork && Read_Final_Network/isMRA)
	{
		attribute<rdc>                          geometry (arc)                   := Read_Final_Network/geometry[nr_OrgEntity];
		attribute<classifications/OSM/wegtype>  wegtype                          := Read_Final_Network/wegtype[nr_OrgEntity];
		attribute<string>                       OSM_id                           := Read_Final_Network/OSM_id[nr_OrgEntity];
		attribute<string>                       wegtype_label                    := Read_Final_Network/wegtype_label[nr_OrgEntity];
		
		attribute<km_hr>                        freeflow_speed_car               := const((0/0)[km_hr],.);
		attribute<km_hr>                        freeflow_speed_bike              := const((0/0)[km_hr],.);
		attribute<km_hr>                        freeflow_speed_pedestrian        := Read_Final_Network/freeflow_speed_pedestrian[nr_OrgEntity];
		
		container Connectiveness
		{
			unit<uint32> src := ..;
			attribute<geometries/rdc>               point (src)           := first_point(src/geometry);
			attribute<geometries/rdc>               nextpoint (src)       := last_point(src/geometry);
			
			unit<uint32> pointset : = union_unit(src,src)
			{
				attribute<geometries/rdc>       point       := union_data(., ../point, ../nextpoint);
				attribute<bool>                 isVerbonden := isNull(rlookup(point, NodesNotConnected/point));
				attribute<src>                   ArcNr       := value(ID(.) % #(src), src);
			}
			
			unit<uint32> NodeSet := unique(pointset/point)
			,	DialogData = "Values"
			,	DialogType = "Map"
			{
				attribute<geometries/rdc> values;
			}

			attribute<NodeSet> F1 (src) := rlookup(point,     NodeSet/Values);
			attribute<NodeSet> F2 (src) := rlookup(nextpoint, NodeSet/Values);
		
			unit<uint32> networks:= connected_parts(F1, F2) // Verzameling van alle netwerken, inclusief de subnetwerken.
			{
				attribute<uint32>   nr_nodes   := sum(const(1, NodeSet, uint32), partnr);
				parameter<uint32>   MaxNrNodes := max(networks/nr_nodes);
				parameter<networks> main       := rlookup(MaxNrNodes, nr_nodes); // uitgangspunt: het netwerk met de meeste nodes is het relevante netwerk
			}

			unit<uint32> NodesNotConnected := Subset(networks/partnr <> networks/main)
			{
				attribute<geometries/rdc> point := NodeSet/Values[Nr_OrgEntity];
			}
			attribute<bool> isVerbonden (src) := all(pointset/isVerbonden, pointset/ArcNr);
		}
	}
}
