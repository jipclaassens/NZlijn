container ModelParameters : using = "units"
{
	parameter<string>   Onderzoeksmoment := 'VoorOpening'; //'VoorOpening' 'NaOpeningJuli' 'NaOpeningOkt' 'NOVI'
	
	
	
	
	parameter<string>   GTFS_FileDate    := Onderzoeksmoment == 'VoorOpening' 
												? '20180530'
												: Onderzoeksmoment == 'NaOpeningJuli'
													? '20180723'
													: Onderzoeksmoment == 'NaOpeningOkt'
														? '20181008'
														: Onderzoeksmoment == 'Date_NaOpening2022'
															? '20220322'
															: '';
	parameter<string>   Analysis_date     := Onderzoeksmoment == 'VoorOpening' 
												? Date_voorOpening
												: Onderzoeksmoment == 'NaOpeningJuli'
													? Date_NaOpeningJuli
													: Onderzoeksmoment == 'NaOpeningOkt'
														? Date_NaOpeningOkt
														: Date_NaOpening2022;
												
	parameter<string>   Date_voorOpening   := '20180605';
	parameter<string>   Date_NaOpeningJuli := '20180724';
	parameter<string>   Date_NaOpeningOkt  := '20181009';
	parameter<string>   Date_NaOpening2022 := '20220329';
	
	parameter<string>   OSM_Date           := '20200117';
	
	parameter<string>   PrevDate        := string(uint32(Analysis_date) - 1);
	parameter<string>   Date_prefix     := substr(Analysis_date, 0, 4) + '/' + substr(Analysis_date, 4, 2) + '/' +  substr(Analysis_date, 6, 2);
	
	parameter<Weekdays> Today           := 1[Weekdays];
	parameter<Weekdays> Yesterday       := Weekdays/PrevRef[Today];
	
	parameter<string>   NetwerkExtent        := 'Amsterdam'; //'Amsterdam' 'Nederland'               //netwerk schaal
	parameter<string>   StudyArea            := 'Amsterdam'; //'NL' 'Amsterdam'                             //studyarea tbv trip selecties
	parameter<string>   Orgset               := 'Point100m'; //'PC6full' 'PC6sub' 'PC4full' 'PC4sub' PC6sub_MRA PC6sub_Pijp Point100m  Buurtsub_MRA  //org punten selectie
	parameter<string>   Destset              := 'LISA'; //'LISA' 'ARRA' 'Inwoners'                        //dest punten selectie
	parameter<string>   banen_locaties_schaal := '100m'; //'500m' '1000m' '5000m'   100m                  //dest punten schaal
	
	parameter<string>   Arrival_or_Departure_at_time := 'Departure'; // 'Arrival'  'Departure'
	
	parameter<m_s>      TransferEffectiveSpeed  := 0.93[m_s]; // 4/1.2= 3.33 km/h --> 0.93 m/s  // expressed in kilometers per hour, modified for manhattan distances

	parameter<m>        MaxTransferDistKm            := 500[m];                   //Maximale euclidische loopafstand tussen OV-haltes voor overstappen, in meters.
	parameter<float32>  MaxODconn                    := 25f;                      //Maximum aantal haltes dat bij de org of de dest wordt gezocht
	parameter<min_f>    MaxWalkingTime_Org2Stop      := 15[min_f];                //Maximum looptijd van org naar eerste halte, in seconden. x  MaxWalkingDistSelection_Org2Stop
	parameter<min_f>    MaxWalkingTime_Stop2Dest     := 15[min_f];                //Maximum looptijd van de laatste stop naar dest, in seconden. x
	parameter<min_f>    MaxBikingTime_Org2Stop       := 15[min_f];                //Maximum fietstijd van org naar eerste halte, in seconden. x
	parameter<min_f>    MaxBikingTime_Stop2Dest      := 15[min_f];                //Maximum fietstijd van laatste halte naar dest, in seconden. x
	parameter<min_f>    MaxWalkingTime_Org2Dest      := 15[min_f];                //Maximale looptijd wanneer er direct van org naar dest locatie wordt gelopen, in seconden.
	parameter<min_f>    MaxBikingTime_Org2Dest       := 15[min_f];                //Maximale fietstijd wanneer er direct van org naar dest locatie wordt gefietst, in seconden.
	parameter<min_f>    MaxOVTime                    := 15[min_f];                //Maximale reistijd met OV. Te gebruiken om de rekentijd te verkorten. LET OP: hierdoor worden mogelijk de verste locaties niet bereikt. Wannneer een distance decay wordt gebruikt is niet zo erg. Maar bij een volledige OD wel! 
	parameter<min_f>    MaxCarTime                   := 15[min_f];                //Maximale reistijd met lopen/fiets/auto //120
	parameter<min_f>    OngelijkvloersPenalty        := 0[min_f];                 //Is er sprake van een halte waar je veel verticale afstand moet afleggen? Dan kun je daar een tijd penalty voor geven bij het overstappen, in seconden.

	parameter<float32>  WegingWachttijdThuisVoortransport := 1f; //0= geen wachttijd thuis meenemen, 1= wel wachttijd meenemen.

	parameter<bool>     OSM_NL_prov             := FALSE;                        //OSM data NL in provincies opgesplitst?
	parameter<km_hr>    WalkingSpeed_kmhr       := 4.8[km_hr];
	parameter<km_hr>    BikingSpeed_kmhr        := 16[km_hr];
	parameter<m_s>      WalkingSpeed            := WalkingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km];
	parameter<m_s>      BikingSpeed             := BikingSpeed_kmhr / 3600[s_f / hr_f] * 1000[m / km];
	parameter<km_hr>    MaxCarSpeed             := 130[km_hr];
	parameter<km_hr>    MaxCarSpeed_limit       := 100[km_hr];
	parameter<km_hr>    CarDefaultSpeed         := 50[km_hr];
	parameter<km_hr>    CarDefaultSpeed_low     := 30[km_hr];
	parameter<km_hr>    Ferry_Speed             := 10[km_hr];
	
	unit<uint32> SampleDay := select_with_attr_by_org_rel(Time, Time/Day = 0) //Hier worden de analyse tijdstippen opgegeven. LET OP: Verander je deze dan zul je ook de NDW_meetmomenten/time moeten aanpassen. En de ChosenMoments ook wanneer er meer/minder momenten opgegeven zijn.
	{
		attribute<bool>    ChosenMoments   := =AsList(HoursMinutes/str,' || ');
		attribute<Time>    Time_rel        := org_rel;
		
		unit<uint8> ChosenHours : nrofrows = 2
		{
			attribute<uint32> values : [7, 8];
		}
		unit<uint8> ChosenMinutes : nrofrows = 4
		{
			attribute<uint32> values : [0,3,7,16];
		}
		unit<uint8> HoursMinutes := combine_uint8(ChosenHours, ChosenMinutes)
		{
			attribute<uint32> Hours     := ChosenHours/values[first_rel];
			attribute<uint32> Minutes   := ChosenMinutes/values[second_rel];
			attribute<string> str       := '(hour == '+string(Hours)+' && minute == '+string(Minutes)+' && second == 0)';
		}
	}

	unit<uint32> MeasureMoments := select_with_attr_by_cond(SampleDay, SampleDay/ChosenMoments)
	{
		attribute<Time>    Moment := Time_rel;
		attribute<string>  Name   := Time/TemplatableText[Moment];
	}
	
	unit<uint32> TransitionType_list : nrofrows = 2
	{
		attribute<string> Type     : ['Org2Stop_W'   ,'Stop2Dest_W'];
		attribute<string> Mode     : ['Walk'         ,'Walk'];
		attribute<string> FromTime : ['FromTime_Walk','FromTime_Walk'];
		attribute<string> ToTime   : ['ToTime_Walk'  ,'ToTime_Walk'];
		attribute<string> OrgDest  : ['Org'          ,'Dest'];
		attribute<min_f>  ModeMax  := ='union_data(.,MaxWalkingTime_Org2Stop,MaxWalkingTime_Stop2Dest)';
	}
	
	container OSM_impl
	{
		unit<uint32> InEenBestand : nrofrows = 1
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Regio             , OrgSet , OrgPath, Land, Type, 
				[
				'Netherlands'             ,'NL', 'OD'

				// 'Belgium'                 ,'BE', 'OD',

				// 'Niedersachsen'           ,'DE', 'OD',
				// 'Nordrhein-Westfalen'     ,'DE', 'OD'
				]; 
			}
			
			attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
			attribute<string>        name           := replace(label, '-', '_');
			attribute<string>        Country        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
			attribute<string>        Type_src       := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			
			parameter<uint32> nrAttr := 3;
		}
		unit<uint32> InProvincies : nrofrows = 12
		{
			unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
			{
				attribute<String> Text:
				// Regio             , OrgSet , OrgPath, Land, Type, 
				[
				'Drenthe'                 ,'NL', 'OD',
				'Flevoland'               ,'NL', 'OD',
				'Friesland'               ,'NL', 'OD',
				'Gelderland'              ,'NL', 'OD',
				'Groningen'               ,'NL', 'OD',
				'Limburg'                 ,'NL', 'OD',
				'Noord-Brabant'           ,'NL', 'OD',
				'Noord-Holland'           ,'NL', 'OD',
				'Overijssel'              ,'NL', 'OD',
				'Utrecht'                 ,'NL', 'OD',
				'Zeeland'                 ,'NL', 'OD',
				'Zuid-Holland'            ,'NL', 'OD'

				// 'Belgium'                 ,'BE', 'OD',

				// 'Niedersachsen'           ,'DE', 'OD',
				// 'Duesseldorf-regbez'       ,'DE', 'OD',
				// 'Koeln-regbez'             ,'DE', 'OD',
				// 'Muenster-regbez'          ,'DE', 'OD'
				]; 
			}
			
			attribute<string>        label          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
			attribute<string>        name           := replace(label, '-', '_');
			attribute<string>        Country        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
			attribute<string>        Type_src       := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
			
			parameter<uint32> nrAttr := 3;
		}
	}
	
	unit<uint32> OSM_Regios := =OSM_NL_prov ? 'OSM_impl/InProvincies' : 'OSM_impl/InEenBestand'
	{
		attribute<string>        label          := =OSM_NL_prov ? 'OSM_impl/InProvincies/label' : 'OSM_impl/InEenBestand/label';
		attribute<string>        name           := =OSM_NL_prov ? 'OSM_impl/InProvincies/name' : 'OSM_impl/InEenBestand/name';
		attribute<string>        Country        := =OSM_NL_prov ? 'OSM_impl/InProvincies/Country' : 'OSM_impl/InEenBestand/Country';
		attribute<string>        Type_src       := =OSM_NL_prov ? 'OSM_impl/InProvincies/Type_src' : 'OSM_impl/InEenBestand/Type_src';
		
		attribute<AnalyseRegios> AnalyseRegios_rel := rlookup(country, AnalyseRegios/short);
		
		attribute<bool>          IsOD_Regio      := Type_src == 'OD';
		
		
		unit<uint32> OD_regios := subset(IsOD_Regio)
		{
			attribute<string> name  := ../name[nr_OrgEntity];
			attribute<string> label := ../label[nr_OrgEntity];
		}
		
		unit<uint32> Countries : nrofrows = 1
		{
			attribute<string> name : 
				[
					// 'Germany'
					 'Netherlands'
					// , 'Belgium'
				];
		}
		
		unit<uint32> Germany := subset(country == 'DE')
		{
			attribute<string> name  := ../name[nr_OrgEntity];
			attribute<string> label := ../label[nr_OrgEntity];
		}
		unit<uint32> Netherlands := subset(country == 'NL')
		{
			attribute<string> name  := ../name[nr_OrgEntity];
			attribute<string> label := ../label[nr_OrgEntity];
		}
		unit<uint32> Belgium := subset(country == 'BE')
		{
			attribute<string> name  := ../name[nr_OrgEntity];
			attribute<string> label := ../label[nr_OrgEntity];
		}
		
	}
	
	unit<uint32> AnalyseRegios : nrofrows = 1 // Hier worden de paden voor elke org set opgegeven. En wanneer er nieuwe bij komen dat hier ook toegevoegd worden.
	{
		unit<uint32> Elements  := Range(uint32, 0, nrAttr*#.)
		{
			attribute<String> Text:
			// Regio             , OrgSet , OrgPath, Land, Type, 
			[
			'Netherlands'             , 'PC4' , '/SourceData/RegioIndelingen/Dutch_PC4_areas'      ,'NL'
			]; 
		}

		attribute<string>        name          := Elements/Text[value(UInt32(ID(.))* nrAttr + 0, Elements)], DialogType = "LabelText";
		attribute<string>        OrgSet        := Elements/Text[value(UInt32(ID(.))* nrAttr + 1, Elements)];
		attribute<string>        OrgSet_path   := Elements/Text[value(UInt32(ID(.))* nrAttr + 2, Elements)];
		attribute<string>        short         := Elements/Text[value(UInt32(ID(.))* nrAttr + 3, Elements)];
		
		parameter<uint32> nrAttr := 4;
	}

}
