Container Frequencies: Using = "Units;SourceData/allroutes;Zones;"
{
	
	attribute<upoint> uniqueLines 	(Allroutes): expr = "point(min_elem(fromNode2D, toNode2D), max_elem(fromNode2D, toNode2D), upoint)";
	attribute<uniqueRoutes> uniId 		(Allroutes): expr = "rlookup(uniqueLines, uniqueRoutes/Values)";
	
	unit<uint32> uniqueRoutes: expr = "unique(uniqueLines)"
	{
		attribute<upoint> Values;
		attribute<uint32> Ids: expr = "min(id(Allroutes), uniId)";		
	}
	container lines: expr = "for_each_nedva(hours/sHour, "
		"'sum(iif(fromtime > ' + string(hours/starthour) + ' && fromtime <= ' + string(hours/thishour) + ', 1, 0), uniId)', uniqueRoutes, uint32, '%dataDir%/results/linefrequencies.dbf')"
	{
		attribute<rdc_meter> line (arc, uniqueRoutes): expr = "AllRoutes/line[uniqueRoutes/Ids]", StorageName = "%dataDir%/results/linefrequencies.shp";	
	}
	
	
	container freq_fromlines: expr = "for_each_nedva(hours/sHour, "
		"'sum(iif(fromtime > ' + string(hours/starthour) + ' && fromtime <= ' + string(hours/thishour) + ', 1, 0), fromNode2D)', NodeSet2D, uint32, '%dataDir%/results/nodefrequencies.dbf')"
	{
		attribute<rdc_meter> Nodes (NodeSet2D): expr = "NodeSet2D/Values", StorageName = "%dataDir%/results/nodefrequencies.shp";	
		attribute<FineSet>	 inZone(NodeSet2D): expr = "point_in_polygon(Nodes, FineSet/vlak)";
	}
	container fineset_fromlines: expr = "for_each_nedva(hours/sHour, "
		"'MakeDefined(max(freq_fromlines/'+hours/shour+', freq_fromlines/inZone), uint32(0))', FineSet, uint32, '%dataDir%/results/neigbhfrequencies.dbf')"
	{
		attribute<rdc_meter>vlak	 (poly, FineSet): 	expr = "FineSet/vlak", StorageName = "%dataDir%/results/neigbhfrequencies.shp";
		attribute<uint32>	numNodes (FineSet): 		expr = "pcount(freq_fromlines/inZone)", StorageName = "%dataDir%/results/neigbhfrequencies.dbf";
	}	
	
	
}