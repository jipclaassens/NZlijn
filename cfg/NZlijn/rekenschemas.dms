container rekenschemas: isHidden = "True", using = "eenheden;geography"
{
	#include <netwerk.dms>

	#include <buffers.dms>

	template Maak_losse_stations
	{
		//
		parameter<string> station_varname;
		parameter<string> station_varname_org;
		unit<uint32> target_domain;
		//
		// unit<uint32> subset  := Subset(Brondata/Metrostations/All_stations/uq/name == station_varname)
		unit<uint32> subset  := Subset(Brondata/Metrostations/All_stations/name == station_varname_org)
		{
			attribute<geography/rdc>    geometry                        := Brondata/Metrostations/All_stations/geometry[nr_OrgEntity];
			attribute<float32>          x                               := PointCol(geometry);
			attribute<float32>          y                               := PointRow(geometry);
			
			attribute<subset>           point_rel (target_domain)       := connect(geometry, target_domain/geometry);

			attribute<float32>          x_targetdomain (target_domain)            := PointCol(geometry)[point_rel];
			attribute<float32>          y_targetdomain (target_domain)            := PointRow(geometry)[point_rel];
			attribute<float32>          delta_x (target_domain)         := abs(x_targetdomain - target_domain/x)^2f;
			attribute<float32>          delta_y (target_domain)         := abs(y_targetdomain - target_domain/y)^2f;

			attribute<m>                dist (target_domain)            := sqrt(delta_x + delta_y)[m];
		}
	}
	
	template MaakImpedancePerStation 
	{
		///
		parameter<string> station_name;
		unit<uint32> domain;
		///
		
		attribute<bool>   Binnen_12min (domain)          := ='Analyse/NetwerkDist_Points_to_NZ/NetwerkDist_perstation/' +station_name+ '/Netwerk/OrgToDest/MakeOD_Time/impedance_org <= 720[s]';
		attribute<bool>   Binnen_12_24min (domain)       := ='Analyse/NetwerkDist_Points_to_NZ/NetwerkDist_perstation/' +station_name+ '/Netwerk/OrgToDest/MakeOD_Time/impedance_org > 720[s] 
																&& Analyse/NetwerkDist_Points_to_NZ/NetwerkDist_perstation/' +station_name+ '/Netwerk/OrgToDest/MakeOD_Time/impedance_org <= 1440[s]';
		attribute<bool>   Binnen_12_36min (domain)       := ='Analyse/NetwerkDist_Points_to_NZ/NetwerkDist_perstation/' +station_name+ '/Netwerk/OrgToDest/MakeOD_Time/impedance_org > 720[s] 
																&& Analyse/NetwerkDist_Points_to_NZ/NetwerkDist_perstation/' +station_name+ '/Netwerk/OrgToDest/MakeOD_Time/impedance_org <= 2160[s]';
		attribute<uint32>   grid_0_12min      (NL_grid/domain)  := any(Binnen_12min, domain/NL_grid_domain_rel) ? 1 : 0;
		attribute<uint32>   grid_12_24min     (NL_grid/domain)  := (any(Binnen_12_24min, domain/NL_grid_domain_rel) ? all(Binnen_12_24min, domain/NL_grid_domain_rel) : False) ? 1 : 0;
		attribute<uint32>   grid_12_36min     (NL_grid/domain)  := (any(Binnen_12_36min, domain/NL_grid_domain_rel) ? all(Binnen_12_36min, domain/NL_grid_domain_rel) : False) ? 1 : 0;
		
		attribute<uint32>   sum_grid (NL_grid/domain)       := grid_0_12min + grid_12_24min;
	}
	
	template CalculateDistance
	{
		///
		unit<uint32> attribute_domain;
		unit<uint32> target_domain;
		//
		attribute<geography/rdc>      geometry     (attribute_domain) := attribute_domain/geometry;
		attribute<attribute_domain>   point_rel    (target_domain)    := connect(geometry, target_domain/geometry);
		
		attribute<float32>            x_attribute  (target_domain)    := PointCol(geometry)[point_rel];
		attribute<float32>            y_attribute  (target_domain)    := PointRow(geometry)[point_rel];
		attribute<float32>            x_target     (target_domain)    := PointCol(target_domain/geometry);
		attribute<float32>            y_target     (target_domain)    := PointRow(target_domain/geometry);
		attribute<float32>            delta_x      (target_domain)    := abs(x_attribute - x_target)^2f;
		attribute<float32>            delta_y      (target_domain)    := abs(y_attribute - y_target)^2f;
		attribute<m>                  dist         (target_domain)    := sqrt(delta_x + delta_y)[m];
	}
	
	Template Classify_9K_EurHA
	{
		//
		attribute<Eur_ha> target (domain_grid);
		unit<spoint> domain_grid;
		//
		
		attribute<Eur_ha> classifyJf (Target_9K)  := ClassifyJenksFisher(target, Target_9K);
		
		parameter<uint32> max        := max(classifyJf)[uint32];
		parameter<uint32> max_strlen := strlen(string(max));
		parameter<uint64> power      := (10d^(max_strlen[float64]-4d))[uint64];
		
		attribute<Eur_ha> classifyJf_rounded         (Target_9K) := ((classifyJf[uint64] / power) * power)[Eur_ha];
		attribute<uint32> classifyJf_rounded_integer (Target_9K) := ((classifyJf[uint64] / power) * power)[uint32];
		
		unit<uint8> Target_9K : nrofrows = 9
		{
			parameter<string> dash      := ' - ';
			parameter<string> comma     := ',';
			attribute<string> label_src := id(.) == (#target_9K[uint8] - 1b) ? string(classifyJf_rounded_integer) + ' or more' : string(classifyJf_rounded_integer) + dash + string(classifyJf_rounded_integer)[id(.) + 1b];
			attribute<string> label     := label_src, DialogType = "LabelText";
			attribute<uint32> PenColor  := Brushcolor, DialogType = "PenColor";
			attribute<uint32> BrushColor:
			[
				rgb(255,255,229),rgb(255,247,188),rgb(254,227,145),
				rgb(254,196,79) ,rgb(254,153,41) ,rgb(236,112,20),
				rgb(204,76,2)   ,rgb(153,52,4)   ,rgb(102,37,6)
			], DialogType = "BrushColor";
			
			attribute<Eur_ha> ClassBreaks := classifyJf_rounded , DialogType = "Classification";
		}
	}
	
}